/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mycom.gui.staff;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import mycom.config.SystemConfig;
import mycom.controllers.UserController;
import mycom.models.Hospital;
import mycom.models.PPEItem;
import mycom.models.Supplier;
import mycom.services.HospitalManagement;
import mycom.services.PPEManagement;
import mycom.services.SupplierManagement;
import mycom.services.UserManagement;
import mycom.utils.FileHandler;
import mycom.utils.WordProcessing;

/**
 *
 * @author sheaw
 */
public class StaffInventoryManagement extends javax.swing.JInternalFrame {
    UserController usrCtrl;
    /**
     * Creates new form AdminUserManagement
     */
    public StaffInventoryManagement(UserController usrCtrl) {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null); // set the top frame thingy null
        
        this.usrCtrl = usrCtrl;
        if (this.usrCtrl.getActiveUser().type.equalsIgnoreCase("super admin")) {
            this.usrCtrl.updateActiveUser(UserManagement.getSuperAdmin());
        } else {
            this.usrCtrl.updateActiveUser(UserManagement.getUserById(this.usrCtrl.getActiveUser().getId()));
        }
        loadItems();
        
        FileHandler itemHandler = new FileHandler(SystemConfig.ppeItemFilePath);
        if (!itemHandler.checkFileExistence()) {
            addItem.setEnabled(false);
            removeItem.setEnabled(false);
        }
        receivePanel.setVisible(false);
        receivePanel.setEnabled(false);
        distributePanel.setVisible(false);
        distributePanel.setEnabled(false);
    }
    
    public void loadItems() {
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        model.setRowCount(0);
        List<PPEItem> allItems = this.usrCtrl.getPPEController().getAllPPEItems();
        if (allItems != null && !allItems.isEmpty()) {
            for (PPEItem item : allItems) {
                String[] itemData = {item.getCode(), WordProcessing.capitalizeEachWord(item.getName()), item.getSupplier(), String.valueOf(item.getQuantity()), item.getLastRestockDateTime()};
                model.addRow(itemData);
            }
        }
        itemTable.revalidate();
        itemTable.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        transactionTable1 = new javax.swing.JTable();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        allItemsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        sortButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        removeItem = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        addItem = new javax.swing.JButton();
        assignSupplierButton = new javax.swing.JButton();
        setStockQuantityButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        receiveStockButton = new javax.swing.JButton();
        distributeStockButton = new javax.swing.JButton();
        cancelTransactionsButton = new javax.swing.JButton();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        receivePanel = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        receivedItemCode = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        receivedItemName = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        supplierCode = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        receivedQuantity = new javax.swing.JTextField();
        confirmReceiveButton = new javax.swing.JButton();
        distributePanel = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        distributedItemCode = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        distributedItemName = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        distributedQuantity = new javax.swing.JTextField();
        confirmDsitributeButton = new javax.swing.JButton();
        hospitalCode = new javax.swing.JComboBox<>();

        transactionTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        transactionTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TRANSACTION TYPE", "QUANTITY", "DATE", "ENTITY INVOLVED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        transactionTable1.setRowHeight(30);
        jScrollPane4.setViewportView(transactionTable1);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 853, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setPreferredSize(new java.awt.Dimension(770, 642));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setAutoscrolls(true);
        jPanel1.setPreferredSize(new java.awt.Dimension(770, 642));
        jPanel1.setLayout(new java.awt.CardLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(770, 642));

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(770, 642));

        allItemsPanel.setBackground(new java.awt.Color(255, 255, 255));
        allItemsPanel.setAutoscrolls(true);
        allItemsPanel.setMinimumSize(new java.awt.Dimension(722, 1165));
        allItemsPanel.setPreferredSize(new java.awt.Dimension(770, 1165));
        allItemsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("PPE Management:");
        allItemsPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, -1));

        searchBar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchBar.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        allItemsPanel.add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 89, 351, 38));

        searchButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        allItemsPanel.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(437, 89, 110, 38));

        sortButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sortButton.setText("Sort by Code");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });
        allItemsPanel.add(sortButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 90, -1, 38));

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ITEM CODE", "ITEM NAME", "SUPPLIER CODE", "AVAILABLE QUANTITY", "LAST RESTOCK DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.setIntercellSpacing(new java.awt.Dimension(5, 10));
        itemTable.setRowHeight(30);
        jScrollPane2.setViewportView(itemTable);

        allItemsPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 157, 672, 300));

        removeItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        removeItem.setText("Remove Item");
        removeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemActionPerformed(evt);
            }
        });
        allItemsPanel.add(removeItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 560, 133, 38));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setText("Inventory Management");
        allItemsPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        addItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addItem.setText("Add Item");
        addItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemActionPerformed(evt);
            }
        });
        allItemsPanel.add(addItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 500, 133, 38));

        assignSupplierButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        assignSupplierButton.setText("Assign Supplier");
        assignSupplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignSupplierButtonActionPerformed(evt);
            }
        });
        allItemsPanel.add(assignSupplierButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 500, 133, 38));

        setStockQuantityButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setStockQuantityButton.setText("Set Quantity");
        setStockQuantityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setStockQuantityButtonActionPerformed(evt);
            }
        });
        allItemsPanel.add(setStockQuantityButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 500, 133, 38));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("PPE Transactions:");
        allItemsPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 630, -1, -1));

        receiveStockButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        receiveStockButton.setText("Receive Stock");
        receiveStockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiveStockButtonActionPerformed(evt);
            }
        });
        allItemsPanel.add(receiveStockButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 630, 133, 38));

        distributeStockButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        distributeStockButton.setText("Dispatch Stock");
        distributeStockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributeStockButtonActionPerformed(evt);
            }
        });
        allItemsPanel.add(distributeStockButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 630, 133, 38));

        cancelTransactionsButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelTransactionsButton.setText("Cancel");
        cancelTransactionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelTransactionsButtonActionPerformed(evt);
            }
        });
        allItemsPanel.add(cancelTransactionsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 630, 133, 38));

        receivePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("PPE Received");
        receivePanel.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 40));
        receivePanel.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 42, 670, 10));

        receivedItemCode.setEditable(false);
        receivedItemCode.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        receivedItemCode.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        receivedItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receivedItemCodeActionPerformed(evt);
            }
        });
        receivePanel.add(receivedItemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 470, 40));

        jLabel43.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel43.setText(":");
        receivePanel.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 10, 20));

        jLabel44.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel44.setText("Item Code");
        receivePanel.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        jLabel45.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel45.setText("Item Name");
        receivePanel.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        jLabel46.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel46.setText(":");
        receivePanel.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 10, 20));

        receivedItemName.setEditable(false);
        receivedItemName.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        receivedItemName.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        receivedItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receivedItemNameActionPerformed(evt);
            }
        });
        receivePanel.add(receivedItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 470, 40));

        jLabel47.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel47.setText("Supplier Code");
        receivePanel.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, 20));

        jLabel48.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel48.setText(":");
        receivePanel.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 200, 10, 20));

        supplierCode.setEditable(false);
        supplierCode.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        supplierCode.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        supplierCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierCodeActionPerformed(evt);
            }
        });
        receivePanel.add(supplierCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 470, 40));

        jLabel49.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel49.setText("Quantity");
        receivePanel.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, -1, 20));

        jLabel50.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel50.setText(":");
        receivePanel.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 250, 10, 20));

        receivedQuantity.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        receivedQuantity.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        receivePanel.add(receivedQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 470, 40));

        confirmReceiveButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        confirmReceiveButton.setText("Receive");
        confirmReceiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmReceiveButtonActionPerformed(evt);
            }
        });
        receivePanel.add(confirmReceiveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 310, 133, 38));

        distributePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("PPE Dispatched");
        distributePanel.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, 40));
        distributePanel.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 680, -1));

        distributedItemCode.setEditable(false);
        distributedItemCode.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        distributedItemCode.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        distributedItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributedItemCodeActionPerformed(evt);
            }
        });
        distributePanel.add(distributedItemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 470, 40));

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel36.setText(":");
        distributePanel.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 10, 20));

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel35.setText("Item Code");
        distributePanel.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        jLabel37.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel37.setText("Item Name");
        distributePanel.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel38.setText(":");
        distributePanel.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 10, 20));

        distributedItemName.setEditable(false);
        distributedItemName.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        distributedItemName.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        distributedItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributedItemNameActionPerformed(evt);
            }
        });
        distributePanel.add(distributedItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 470, 40));

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel39.setText("Hospital Code");
        distributePanel.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, 20));

        jLabel40.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel40.setText(":");
        distributePanel.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 200, 10, 20));

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel41.setText("Quantity");
        distributePanel.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, -1, 20));

        jLabel42.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel42.setText(":");
        distributePanel.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 250, 10, 20));

        distributedQuantity.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        distributedQuantity.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        distributePanel.add(distributedQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 470, 40));

        confirmDsitributeButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        confirmDsitributeButton.setText("Dispatch");
        confirmDsitributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmDsitributeButtonActionPerformed(evt);
            }
        });
        distributePanel.add(confirmDsitributeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 300, 133, 38));

        hospitalCode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        hospitalCode.setBorder(null);
        distributePanel.add(hospitalCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 470, 40));

        jLayeredPane2.setLayer(receivePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(distributePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addComponent(receivePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(distributePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(receivePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(distributePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
        );

        allItemsPanel.add(jLayeredPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 730, 670, 380));

        jScrollPane1.setViewportView(allItemsPanel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, "card4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemActionPerformed
        int selectedRow = itemTable.getSelectedRow();
        if (selectedRow != -1) {
            int choice = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to remove this item?\nThis action cannot be undone!",
                "Confirm PPE Item Deletion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
                );

            if (choice == JOptionPane.YES_OPTION) {
                String itemCode = itemTable.getValueAt(selectedRow, 0).toString();
                PPEItem item = PPEManagement.getPPEItemByCode(itemCode);
                LinkedHashMap<String, String> msg = this.usrCtrl.getPPEController().removePPEItem(itemCode);
                if (msg.get("success") != null) {
                    JOptionPane.showMessageDialog(this, String.format("PPE Item ('%s', '%s') is removed!", item.getCode(), item.getName()));
                    loadItems();
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Fail to remove PPE Item {'%s' - '%s'} :(\n", itemCode, item.getName()) + msg.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                System.out.println("User canceled input.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row first");
        }
    }//GEN-LAST:event_removeItemActionPerformed

    private void addItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemActionPerformed
        JTextField field1 = new JTextField();
        JTextField field2 = new JTextField();

        Object[] message = {
            "PPE Item Code:", field1,
            "PPE Item Name:", field2
        };

        int option = JOptionPane.showConfirmDialog(this, message, "Add New PPE Items", JOptionPane.OK_CANCEL_OPTION);
        
        if (option == JOptionPane.OK_OPTION) {
            String itemCode = field1.getText();
            String itemName = field2.getText();
            LinkedHashMap<String, String> msg = this.usrCtrl.getPPEController().addPPEItems(itemCode, itemName, "", 0);
            if (msg.get("success") != null) {
                PPEItem item = PPEManagement.getPPEItemByCode(msg.get("newItemCode"));
                JOptionPane.showMessageDialog(this, String.format("New PPE Item ('%s', '%s') is added!", item.getCode(), item.getName()));
                loadItems();
            } else {
                JOptionPane.showMessageDialog(this, String.format("Fail to add new PPE Item {'%s' - '%s'} :(\n", itemCode, itemName) + msg.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            System.out.println("User canceled input.");
        }
    }//GEN-LAST:event_addItemActionPerformed

    private void assignSupplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignSupplierButtonActionPerformed
        int selectedRow = itemTable.getSelectedRow();
        if (selectedRow != -1) {
            List<Supplier> allSuppliers = SupplierManagement.getAllSuppliers();
            String[] supplierCodes = allSuppliers.stream().map(Supplier::getCode).toArray(String[]::new);

            JComboBox<String> supplierComboBox = new JComboBox<>(supplierCodes);

            int option = JOptionPane.showConfirmDialog(
                    null, supplierComboBox, "Select Supplier", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (option == JOptionPane.OK_OPTION) {
                String supplierCode = (String) supplierComboBox.getSelectedItem();
                String itemCode = itemTable.getValueAt(selectedRow, 0).toString();
                PPEItem item = PPEManagement.getPPEItemByCode(itemCode);
                LinkedHashMap<String, String> msg = this.usrCtrl.getPPEController().assignSupplier(itemCode, supplierCode);
                if (msg.get("success") != null) {
                    Supplier supplier = SupplierManagement.getSupplierByCode(supplierCode);
                    JOptionPane.showMessageDialog(this, String.format("PPE Item ('%s', '%s') is assigned with Supplier {'%s' - '%s'}!", item.getCode(), item.getName(), supplier.getCode(), supplier.getName()));
                    loadItems();
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Fail to assign supplier to PPE Item {'%s' - '%s'} :(\n", itemCode, item.getName()) + msg.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                System.out.println("User canceled input.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row first");
        }
    }//GEN-LAST:event_assignSupplierButtonActionPerformed

    private void setStockQuantityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setStockQuantityButtonActionPerformed
        int selectedRow = itemTable.getSelectedRow();
        if (selectedRow != -1) {
            String option = JOptionPane.showInputDialog(this, "Stock Quantity: ", "Set PPE Item Stock Quantity", JOptionPane.QUESTION_MESSAGE);
            if (option != null) {
                String itemCode = itemTable.getValueAt(selectedRow, 0).toString();
                PPEItem item = PPEManagement.getPPEItemByCode(itemCode);
                if (!option.trim().equals("")) {
                    int quantity = Integer.parseInt(option);
                    LinkedHashMap<String, String> msg = this.usrCtrl.getPPEController().setExactPPEItemQuantity(itemCode, quantity);
                    if (msg.get("success") != null) {
                        JOptionPane.showMessageDialog(this, String.format("PPE Item ('%s', '%s') stock quantity is updated!", item.getCode(), item.getName()));
                        loadItems();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("Fail to set stock quantity for PPE Item {'%s' - '%s'} :(\n", itemCode, item.getName()) + msg.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid stock quantity", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                System.out.println("User canceled input.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row first");
        }
    }//GEN-LAST:event_setStockQuantityButtonActionPerformed

    private void receiveStockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiveStockButtonActionPerformed
        int selectedRow = itemTable.getSelectedRow();
        if (selectedRow != -1) {
            distributePanel.setVisible(false);
            distributePanel.setEnabled(false);
            receivePanel.setVisible(true);
            receivePanel.setEnabled(true);
            receivedItemCode.setText(itemTable.getValueAt(selectedRow, 0).toString());
            receivedItemName.setText(itemTable.getValueAt(selectedRow, 1).toString());
            supplierCode.setText(itemTable.getValueAt(selectedRow, 2).toString());
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row first");
        }
    }//GEN-LAST:event_receiveStockButtonActionPerformed

    private void distributeStockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributeStockButtonActionPerformed
        int selectedRow = itemTable.getSelectedRow();
        if (selectedRow != -1) {
            receivePanel.setVisible(false);
            receivePanel.setEnabled(false);
            distributePanel.setVisible(true);
            distributePanel.setEnabled(true);
            distributedItemCode.setText(itemTable.getValueAt(selectedRow, 0).toString());
            distributedItemName.setText(itemTable.getValueAt(selectedRow, 1).toString());
            List<Hospital> allHospitals = HospitalManagement.getAllHospitals();
            String[] hospitalCodes = allHospitals.stream().map(Hospital::getCode).toArray(String[]::new);
            hospitalCode.setModel(new DefaultComboBoxModel<>(hospitalCodes));
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row first");
        }
    }//GEN-LAST:event_distributeStockButtonActionPerformed

    private void cancelTransactionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTransactionsButtonActionPerformed
        receivePanel.setVisible(false);
        receivePanel.setEnabled(false);
        distributePanel.setVisible(false);
        distributePanel.setEnabled(false);
        receivedItemCode.setText("");
        receivedItemName.setText("");
        supplierCode.setText("");
        receivedQuantity.setText("");
        distributedItemCode.setText("");
        distributedItemName.setText("");
        distributedQuantity.setText("");
    }//GEN-LAST:event_cancelTransactionsButtonActionPerformed

    private void distributedItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributedItemCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_distributedItemCodeActionPerformed

    private void distributedItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributedItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_distributedItemNameActionPerformed

    private void confirmDsitributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmDsitributeButtonActionPerformed
        String quantityInput = distributedQuantity.getText();
        String hospitalCodeInput = (String) hospitalCode.getSelectedItem();
        if (quantityInput != null && hospitalCodeInput != null) {
            int quantity = Integer.parseInt(quantityInput);
            String itemCode = distributedItemCode.getText();
            PPEItem item = PPEManagement.getPPEItemByCode(itemCode);
            LinkedHashMap<String, String> msg = this.usrCtrl.getTransactionController().distributeStock(itemCode, quantity, hospitalCodeInput);
            if (msg.get("success") != null) {
                JOptionPane.showMessageDialog(this, String.format("PPE Item ('%s', '%s') dispatched %d boxes!", item.getCode(), item.getName(), quantity));
                loadItems();
            } else {
                JOptionPane.showMessageDialog(this, String.format("PPE Item {'%s' - '%s'} failed to dispatch stock :(\n", itemCode, item.getName()) + msg.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please fill in the required fields", "Advice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_confirmDsitributeButtonActionPerformed

    private void receivedItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receivedItemCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_receivedItemCodeActionPerformed

    private void receivedItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receivedItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_receivedItemNameActionPerformed

    private void supplierCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_supplierCodeActionPerformed

    private void confirmReceiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmReceiveButtonActionPerformed
        String quantityInput = receivedQuantity.getText();
        if (quantityInput != null) {
            int quantity = Integer.parseInt(quantityInput);
            String itemCode = receivedItemCode.getText();
            PPEItem item = PPEManagement.getPPEItemByCode(itemCode);
            LinkedHashMap<String, String> msg = this.usrCtrl.getTransactionController().receiveStock(itemCode, quantity);
            if (msg.get("success") != null) {
                JOptionPane.showMessageDialog(this, String.format("PPE Item ('%s', '%s') received %d boxes!", item.getCode(), item.getName(), quantity));
                loadItems();
            } else {
                JOptionPane.showMessageDialog(this, String.format("PPE Item {'%s' - '%s'} failed to receive stock :(\n", itemCode, item.getName()) + msg.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please fill in the required field", "Advice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_confirmReceiveButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String keyword = searchBar.getText();
        List<PPEItem> searchResults = this.usrCtrl.getPPEController().searchPPEItems(keyword);
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        model.setRowCount(0);
        for (PPEItem item: searchResults) {
            String[] itemData = {item.getCode(), WordProcessing.capitalizeEachWord(item.getName()), item.getSupplier(), String.valueOf(item.getQuantity()), item.getLastRestockDateTime()};
            model.addRow(itemData);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        itemTable.setRowSorter(sorter);
        sorter.setSortKeys(Arrays.asList(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
    }//GEN-LAST:event_sortButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItem;
    private javax.swing.JPanel allItemsPanel;
    private javax.swing.JButton assignSupplierButton;
    private javax.swing.JButton cancelTransactionsButton;
    private javax.swing.JButton confirmDsitributeButton;
    private javax.swing.JButton confirmReceiveButton;
    private javax.swing.JPanel distributePanel;
    private javax.swing.JButton distributeStockButton;
    private javax.swing.JTextField distributedItemCode;
    private javax.swing.JTextField distributedItemName;
    private javax.swing.JTextField distributedQuantity;
    private javax.swing.JComboBox<String> hospitalCode;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JPanel receivePanel;
    private javax.swing.JButton receiveStockButton;
    private javax.swing.JTextField receivedItemCode;
    private javax.swing.JTextField receivedItemName;
    private javax.swing.JTextField receivedQuantity;
    private javax.swing.JButton removeItem;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton setStockQuantityButton;
    private javax.swing.JButton sortButton;
    private javax.swing.JTextField supplierCode;
    private javax.swing.JTable transactionTable1;
    // End of variables declaration//GEN-END:variables
}
