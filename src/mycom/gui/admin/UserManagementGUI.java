/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mycom.gui.admin;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import mycom.controllers.UserController;
import mycom.models.User;
import mycom.services.UserManagement;
import mycom.utils.DateTime;
import mycom.utils.WordProcessing;

/**
 *
 * @author sheaw
 */
public class UserManagementGUI extends javax.swing.JInternalFrame {
    UserController usrCtrl;
    User activeUser;
    /**
     * Creates new form AdminUserManagement
     */
    public UserManagementGUI(UserController usrCtrl) {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null); // set the top frame thingy null
        
        this.activeUser = usrCtrl.getActiveUser();
        this.usrCtrl = usrCtrl;
        if (this.usrCtrl.getActiveUser().type.equalsIgnoreCase("super admin")) {
            this.usrCtrl.updateActiveUser(UserManagement.getSuperAdmin());
        } else {
            this.usrCtrl.updateActiveUser(UserManagement.getUserById(this.usrCtrl.getActiveUser().getId()));
        }
        if (this.activeUser.type.equalsIgnoreCase("super admin")) {
            loadUsers();
        }
        if (this.usrCtrl.getUserServices().getCRUDManager() && this.usrCtrl.getUserServices().getCRUDStaff()) {
            loadUsers();
        } else if (this.usrCtrl.getUserServices().getCRUDManager()) {
            loadManagers();
        } else if (this.usrCtrl.getUserServices().getCRUDStaff()) {
            loadStaffs();
        }
    }
    
    public void loadUsers() {
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        model.setRowCount(0);
//        UserManagement usrServices = this.usrCtrl.getUserServices();
        List<User> allUsers = mycom.services.UserManagement.getAllUsers();
        for (User usr: allUsers) {
            LocalDate date = DateTime.getDate(DateTime.toDateTimeObject(usr.getJoinedDateTime()));
            String joinedDate = DateTime.toDateStringWords(date);
            String[] userData = {usr.getId(), WordProcessing.capitalizeEachWord(usr.getName()), WordProcessing.capitalizeEachWord(usr.type), joinedDate};
            model.addRow(userData);
        }
//        userTable = new JTable(model);
    }
    
    private void loadManagers() {
        userManagementLabel.setText("Manager Management");
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        model.setRowCount(0);
//        UserManagement usrServices = this.usrCtrl.getUserServices();
        List<User> allManagers = mycom.services.UserManagement.getManagers();
        for (User usr: allManagers) {
            LocalDate date = DateTime.getDate(DateTime.toDateTimeObject(usr.getJoinedDateTime()));
            String joinedDate = DateTime.toDateStringWords(date);
            String[] userData = {usr.getId(), WordProcessing.capitalizeEachWord(usr.getName()), WordProcessing.capitalizeEachWord(usr.type), joinedDate};
            model.addRow(userData);
        }
    }
    
    public void loadStaffs() {
        userManagementLabel.setText("Staff Management");
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        model.setRowCount(0);
        List<User> allStaffs = mycom.services.UserManagement.getStaffs();
        for (User usr: allStaffs) {
            LocalDate date = DateTime.getDate(DateTime.toDateTimeObject(usr.getJoinedDateTime()));
            String joinedDate = DateTime.toDateStringWords(date);
            String[] userData = {usr.getId(), WordProcessing.capitalizeEachWord(usr.getName()), WordProcessing.capitalizeEachWord(usr.type), joinedDate};
            model.addRow(userData);
        }
//        userTable = new JTable(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        userManagementLabel = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        sortButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        createUserButton = new javax.swing.JButton();
        modifyUserButton = new javax.swing.JButton();
        deleteUserButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setPreferredSize(new java.awt.Dimension(770, 642));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setAutoscrolls(true);
        jPanel1.setPreferredSize(new java.awt.Dimension(770, 642));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userManagementLabel.setBackground(new java.awt.Color(255, 255, 255));
        userManagementLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        userManagementLabel.setText("User Management");
        jPanel1.add(userManagementLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        searchBar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchBar.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        jPanel1.add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 89, 351, 38));

        searchButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        jPanel1.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(437, 89, 97, 38));

        sortButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sortButton.setText("Sort by ID");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });
        jPanel1.add(sortButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(561, 89, -1, 38));

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "USER ID", "NAME", "ROLE", "CREATED DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userTable.setIntercellSpacing(new java.awt.Dimension(5, 10));
        userTable.setRowHeight(30);
        jScrollPane2.setViewportView(userTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 157, 672, 300));

        createUserButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        createUserButton.setText("Create New User");
        createUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserButtonActionPerformed(evt);
            }
        });
        jPanel1.add(createUserButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(253, 487, -1, 38));

        modifyUserButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        modifyUserButton.setText("Modify User");
        modifyUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyUserButtonActionPerformed(evt);
            }
        });
        jPanel1.add(modifyUserButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(421, 487, 133, 38));

        deleteUserButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteUserButton.setText("Delete User");
        deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteUserButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(589, 487, 133, 38));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserButtonActionPerformed
        int selectedRow = userTable.getSelectedRow();
        if (selectedRow != -1) {
            String usrId = userTable.getValueAt(selectedRow, 0).toString();
            int choice = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete this user?\nThis action cannot be undone!",
                "Confirm User Deletion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
                );

            if (choice == JOptionPane.YES_OPTION) {
                LinkedHashMap<String, String> msg = this.usrCtrl.deleteUser(usrId);
                if (msg.get("success") != null) {                
                        JOptionPane.showMessageDialog(this, String.format("User '%s' is deleted!", usrId));
                        if (this.activeUser.type.equalsIgnoreCase("super admin")) {
                            loadUsers();
                        }
                        if (this.usrCtrl.getUserServices().getCRUDManager() && this.usrCtrl.getUserServices().getCRUDStaff()) {
                            loadUsers();
                        } else if (this.usrCtrl.getUserServices().getCRUDManager()) {
                            loadManagers();
                        } else if (this.usrCtrl.getUserServices().getCRUDStaff()) {
                            loadStaffs();
                        }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Fail to delete User '%s' :(", usrId) + msg.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "User deletion canceled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row first", "Advice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_deleteUserButtonActionPerformed

    private void modifyUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyUserButtonActionPerformed
        int selectedRow = userTable.getSelectedRow();
        if (selectedRow != -1) {
           String[] roles = {"Staff", "Manager"};
            JComboBox<String> roleCombo = new JComboBox<>(roles);

            JTextField field1 = new JTextField();

            Object[] message = {
                "New User Name:", field1,
                "New User Role", roleCombo
            };

            int option = JOptionPane.showConfirmDialog(this, message, "Create New User", JOptionPane.OK_CANCEL_OPTION);

            if (option == JOptionPane.OK_OPTION) {
                String usrId = userTable.getValueAt(selectedRow, 0).toString();
                User selectedUsr = mycom.services.UserManagement.getUserById(usrId);
                String newUsrName = field1.getText();
                String newUsrRole = roleCombo.getSelectedItem().toString().toLowerCase();
                if (!selectedUsr.getName().equals(newUsrName)) {
                    LinkedHashMap<String, String> msg = this.usrCtrl.modifyUserName(newUsrName, usrId);
                    if (msg.get("success") != null) {
                        JOptionPane.showMessageDialog(this, String.format("User '%s' name is updated!", usrId));
                        userTable.setValueAt(newUsrName, selectedRow, 1);
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("Fail to update user '%s' name :(\n", usrId) + msg.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                if (!selectedUsr.type.equalsIgnoreCase(newUsrRole)) {
                    LinkedHashMap<String, String> msg = this.usrCtrl.modifyType(newUsrRole, usrId);
                    if (msg.get("success") != null) {
                        JOptionPane.showMessageDialog(this, String.format("User '%s' role is updated!", usrId));
                        userTable.setValueAt(WordProcessing.capitalizeEachWord(newUsrRole), selectedRow, 2);
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("Fail to update user '%s' role :(\n", usrId) + msg.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "User modification canceled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row first");
        }
    }//GEN-LAST:event_modifyUserButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String keyword = searchBar.getText();
        List<User> searchResults = this.usrCtrl.searchUser(keyword);
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        model.setRowCount(0);
        for (User usr: searchResults) {
            LocalDate date = DateTime.getDate(DateTime.toDateTimeObject(usr.getJoinedDateTime()));
            String joinedDate = DateTime.toDateStringWords(date);
            String[] userData = {usr.getId(), WordProcessing.capitalizeEachWord(usr.getName()), WordProcessing.capitalizeEachWord(usr.type), joinedDate};
            model.addRow(userData);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        userTable.setRowSorter(sorter);
        sorter.setSortKeys(Arrays.asList(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
    }//GEN-LAST:event_sortButtonActionPerformed

    private void createUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserButtonActionPerformed
        String[] roles = {"Staff", "Manager"};
        JComboBox<String> roleCombo = new JComboBox<>(roles);
    
        JTextField field1 = new JTextField();

        Object[] message = {
            "User Name:", field1,
            "User Role", roleCombo
        };

        int option = JOptionPane.showConfirmDialog(this, message, "Create New User", JOptionPane.OK_CANCEL_OPTION);
        
        if (option == JOptionPane.OK_OPTION) {
            String tempUserPwd = mycom.services.UserManagement.generateTemporaryPassword();
            String usrName = field1.getText();
            String usrRole = roleCombo.getSelectedItem().toString().toLowerCase();
            LinkedHashMap<String, String> msg = this.usrCtrl.createUser(usrName, tempUserPwd, usrRole);
            User newUsr = mycom.services.UserManagement.getUserById(msg.get("newUserId"));
            if (newUsr != null) {
                JOptionPane.showMessageDialog(this, String.format("New User ('%s', '%s') is created!", newUsr.getId(), newUsr.getName()));
                String newUsrPwd = newUsr.getPwd();
                String showNewUsr = String.format("User ID: %s\nUser Password: %s\n\nPlease notfy the user to update the password for security", newUsr.getId(), newUsr.getPwd());
                JOptionPane.showMessageDialog(this, showNewUsr, "New User Credentials", JOptionPane.INFORMATION_MESSAGE);
                if (this.activeUser.type.equalsIgnoreCase("super admin")) {
                    loadUsers();
                }
                if (this.usrCtrl.getUserServices().getCRUDManager() && this.usrCtrl.getUserServices().getCRUDStaff()) {
                    loadUsers();
                } else if (this.usrCtrl.getUserServices().getCRUDManager()) {
                    loadManagers();
                } else if (this.usrCtrl.getUserServices().getCRUDStaff()) {
                    loadStaffs();
                }
            } else {
                JOptionPane.showMessageDialog(this, String.format("Fail to create new User '%s' :(\n", usrName) + msg.get("msg"), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_createUserButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createUserButton;
    private javax.swing.JButton deleteUserButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton modifyUserButton;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton sortButton;
    private javax.swing.JLabel userManagementLabel;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
