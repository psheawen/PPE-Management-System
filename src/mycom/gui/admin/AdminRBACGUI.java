/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mycom.gui.admin;

import java.util.LinkedHashMap;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import mycom.controllers.UserController;
import mycom.utils.Logger;

/**
 *
 * @author sheaw
 */
public class AdminRBACGUI extends javax.swing.JInternalFrame {
    private final UserController usrCtrl;
    private static DefaultTableModel model;
    private static String role;
    /**
     * Creates new form AdminUserManagement
     */
    public AdminRBACGUI(UserController usrCtrl) {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null); // set the top frame thingy null
        
        model = (DefaultTableModel) permissionTable.getModel();
        this.usrCtrl = usrCtrl;
        listenTableModel();
    }
    
    private void listenTableModel() {
        model.addTableModelListener(e -> {
            int row = e.getFirstRow();
            int column = e.getColumn();

            // Ensure valid row and column selection
            if (row < 0 || column < 0) return;

            if (column == 1 || column == 2) {
                Object valueObj = model.getValueAt(row, column);
                int otherCol = (column == 1) ? 2 : 1;
                Object otherValueObj = model.getValueAt(row, otherCol);

                // Prevent NullPointerException
                if (!(valueObj instanceof Boolean) || !(otherValueObj instanceof Boolean)) return;

                Boolean value = (Boolean) valueObj;
                Boolean otherValue = (Boolean) otherValueObj;

                if (value) {
                    model.setValueAt(false, row, otherCol);
                }

                // Ensure at least one column remains true
                if (!value && !otherValue) {
                    model.setValueAt(true, row, column == 1 ? 2 : 1);
                }
            }
        });
    }
    
    private void loadPermissions(String role) {
        for (LinkedHashMap<String, String> permission: mycom.services.UserManagement.getPermissionMap()) {
            if (permission.get("userType").equalsIgnoreCase(role)) {
                if (permission.get("CRUDmanager").equalsIgnoreCase("allow")) {
                    model.setValueAt(true, 0, 1);
                    model.setValueAt(false, 0, 2);
                } else {
                    model.setValueAt(true, 0, 2);
                    model.setValueAt(false, 0, 1);
                }
                if (permission.get("CRUDstaff").equalsIgnoreCase("allow")) {
                    model.setValueAt(true, 1, 1);
                    model.setValueAt(false, 1, 2);
                } else {
                    model.setValueAt(true, 1, 2);
                    model.setValueAt(false, 1, 1);
                }
                if (permission.get("InitializeInventory").equalsIgnoreCase("allow")) {
                    model.setValueAt(true, 2, 1);
                    model.setValueAt(false, 2, 2);
                } else {
                    model.setValueAt(true, 2, 2);
                    model.setValueAt(false, 2, 1);
                }
                if (permission.get("ResetInventory").equalsIgnoreCase("allow")) {
                    model.setValueAt(true, 3, 1);
                    model.setValueAt(false, 3, 2);
                } else {
                    model.setValueAt(true, 3, 2);
                    model.setValueAt(false, 3, 1);
                }
                if (permission.get("ResetSystem").equalsIgnoreCase("allow")) {
                    model.setValueAt(true, 4, 1);
                    model.setValueAt(false, 4, 2);
                } else {
                    model.setValueAt(true, 4, 2);
                    model.setValueAt(false, 4, 1);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbacRoleSelect = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        confirmButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        staffButton = new javax.swing.JRadioButton();
        managerButton = new javax.swing.JRadioButton();
        permissionLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        permissionTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setPreferredSize(new java.awt.Dimension(770, 642));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setAutoscrolls(true);
        jPanel1.setPreferredSize(new java.awt.Dimension(770, 642));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        confirmButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        confirmButton.setText("OK");
        confirmButton.setPreferredSize(new java.awt.Dimension(80, 30));
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });
        jPanel1.add(confirmButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 492, -1, -1));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Role-Based Access Control");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.lightGray));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Group of Users:");

        staffButton.setBackground(new java.awt.Color(255, 255, 255));
        rbacRoleSelect.add(staffButton);
        staffButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        staffButton.setText("Staff");
        staffButton.setIconTextGap(20);
        staffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffButtonActionPerformed(evt);
            }
        });

        managerButton.setBackground(new java.awt.Color(255, 255, 255));
        rbacRoleSelect.add(managerButton);
        managerButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        managerButton.setText("Manager");
        managerButton.setIconTextGap(20);
        managerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(staffButton)
                    .addComponent(managerButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(staffButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(managerButton)
                .addContainerGap())
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 89, 670, -1));

        permissionLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        permissionLabel.setText("Permissions:");
        jPanel1.add(permissionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 223, -1, -1));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        permissionTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        permissionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Create, Modify, Delete Manager ", null, null},
                {"Create, Modify, Delete Staff ", null, null},
                {"Initialize Inventory ", null, null},
                {"Reset Inventory",  new Boolean(false), null},
                {"Reset System", null, null}
            },
            new String [] {
                "Permissions", "Allow", "Deny"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        permissionTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        permissionTable.setAutoscrolls(false);
        permissionTable.setFillsViewportHeight(true);
        permissionTable.setIntercellSpacing(new java.awt.Dimension(10, 10));
        permissionTable.setRowHeight(30);
        permissionTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(permissionTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 275, 670, 187));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void staffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffButtonActionPerformed
        role = staffButton.getText().toLowerCase();
        permissionLabel.setText("Permissions for Staff:");
        loadPermissions(role);
    }//GEN-LAST:event_staffButtonActionPerformed

    private void managerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerButtonActionPerformed
        role = managerButton.getText().toLowerCase();
        permissionLabel.setText("Permissions for Manager:");
        loadPermissions(role);
    }//GEN-LAST:event_managerButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        Boolean CRUDmanager = (Boolean) model.getValueAt(0, 1);
        Boolean CRUDstaff = (Boolean) model.getValueAt(1, 1);
        Boolean InitializeInventory = (Boolean) model.getValueAt(2, 1);
        Boolean ResetInventory = (Boolean) model.getValueAt(3, 1);
        Boolean ResetSystem = (Boolean) model.getValueAt(4, 1);
        int choice = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to update the user permissions?",
            "Confirm Permissions Update",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
            );
        if (choice == JOptionPane.YES_OPTION) {
            LinkedHashMap<String, String> msg = this.usrCtrl.getUserServices().modifyUserPermissions(role, CRUDmanager, CRUDstaff, InitializeInventory, ResetInventory, ResetSystem);
            if (msg.get("success") != null) {
                JOptionPane.showMessageDialog(this, "User permissions has been updated successfully!", "Update Complete", JOptionPane.INFORMATION_MESSAGE);
                Logger.log(String.format("User {%s - %s - %s} has updated user permissions", this.usrCtrl.getActiveUser().getId(), this.usrCtrl.getActiveUser().type, this.usrCtrl.getActiveUser().getName()));
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update user permissions :(" + msg.get("msg") , "Update Failed", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Permissions update canceled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }
        loadPermissions(role);
    }//GEN-LAST:event_confirmButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton managerButton;
    private javax.swing.JLabel permissionLabel;
    private javax.swing.JTable permissionTable;
    private javax.swing.ButtonGroup rbacRoleSelect;
    private javax.swing.JRadioButton staffButton;
    // End of variables declaration//GEN-END:variables
}
