/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mycom.gui.admin;

import java.util.LinkedHashMap;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import mycom.config.SystemConfig;
import mycom.controllers.UserController;
import mycom.services.UserManagement;
import mycom.utils.FileHandler;

/**
 *
 * @author sheaw
 */
public class SystemManagementGUI extends javax.swing.JInternalFrame {
    UserController usrCtrl;
    /**
     * Creates new form AdminUserManagement
     */
    public SystemManagementGUI(UserController usrCtrl) {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null); // set the top frame thingy null
        
        this.usrCtrl = usrCtrl;
        if (this.usrCtrl.getActiveUser().type.equalsIgnoreCase("super admin")) {
            this.usrCtrl.updateActiveUser(UserManagement.getSuperAdmin());
        } else {
            this.usrCtrl.updateActiveUser(UserManagement.getUserById(this.usrCtrl.getActiveUser().getId()));
        }
        
        SwingUtilities.invokeLater(() -> {
            if (!this.usrCtrl.getActiveUser().equals(UserManagement.getSuperAdmin())) {
                if (!this.usrCtrl.getUserServices().getInitializeInventory()) {
                    systemManagementTabbedPane.remove(initializeInventoryTab);
                }
                if (!this.usrCtrl.getUserServices().getResetInventory()) {
                    systemManagementTabbedPane.remove(resetInventoryTab);
                }
                if (!this.usrCtrl.getUserServices().getResetSystem()) {
                    systemManagementTabbedPane.remove(resetSystemTab);
                }
            }
            systemManagementTabbedPane.revalidate();
            systemManagementTabbedPane.repaint();
        });
        FileHandler itemHandler = new FileHandler(SystemConfig.ppeItemFilePath);
        if (itemHandler.checkFileExistence()) {
            initializeInventoryButton.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        systemManagementTabbedPane = new javax.swing.JTabbedPane();
        initializeInventoryTab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        initializeInventoryDescription = new javax.swing.JTextArea();
        initializeInventoryButton = new javax.swing.JButton();
        resetInventoryTab = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resetInventoryDescription = new javax.swing.JTextArea();
        resetInventoryButton = new javax.swing.JButton();
        resetSystemTab = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        resetInventoryDescription1 = new javax.swing.JTextArea();
        resetSystemButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setPreferredSize(new java.awt.Dimension(770, 642));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setAutoscrolls(true);
        jPanel1.setPreferredSize(new java.awt.Dimension(770, 642));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        systemManagementTabbedPane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        systemManagementTabbedPane.setPreferredSize(new java.awt.Dimension(770, 642));

        initializeInventoryTab.setBackground(new java.awt.Color(255, 255, 255));
        initializeInventoryTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Initialize Inventory");
        initializeInventoryTab.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(670, 113));

        initializeInventoryDescription.setEditable(false);
        initializeInventoryDescription.setColumns(20);
        initializeInventoryDescription.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        initializeInventoryDescription.setLineWrap(true);
        initializeInventoryDescription.setRows(5);
        initializeInventoryDescription.setText("Initializing the Inventory will pre-load the system with default PPE items, ensuring a quick start after a reset.\n\nKey Points:\n[1] Adds predefined PPE items.\n[2] Does not restore previous inventory data.\n[3] Can only be done after a system or inventory reset.");
        initializeInventoryDescription.setWrapStyleWord(true);
        initializeInventoryDescription.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        jScrollPane1.setViewportView(initializeInventoryDescription);

        initializeInventoryTab.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 89, -1, 150));

        initializeInventoryButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        initializeInventoryButton.setText("Initialize");
        initializeInventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initializeInventoryButtonActionPerformed(evt);
            }
        });
        initializeInventoryTab.add(initializeInventoryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 269, 80, 30));

        systemManagementTabbedPane.addTab("Initialize Inventory", initializeInventoryTab);

        resetInventoryTab.setBackground(new java.awt.Color(255, 255, 255));
        resetInventoryTab.setPreferredSize(new java.awt.Dimension(720, 299));
        resetInventoryTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Reset Inventory");
        resetInventoryTab.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(670, 113));

        resetInventoryDescription.setEditable(false);
        resetInventoryDescription.setColumns(20);
        resetInventoryDescription.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        resetInventoryDescription.setLineWrap(true);
        resetInventoryDescription.setRows(5);
        resetInventoryDescription.setText("Resetting the inventory will permanently delete all current inventory records, supplier details, hospital records, and transaction history. This action cannot be undone! \n\nConsequences of Resetting Inventory: \n[1]  All stock levels will be cleared.\n[2]  Low stock alerts and transaction history will be erased.\n[3]  Suppliers and hospitals must be re-added manually.\n[4]  The system will reinitialize inventory setup as if it is being used for the first time.\n\nOnly proceed if you are absolutely sure you want to reset the inventory.");
        resetInventoryDescription.setWrapStyleWord(true);
        resetInventoryDescription.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        jScrollPane2.setViewportView(resetInventoryDescription);

        resetInventoryTab.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 89, -1, 230));

        resetInventoryButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        resetInventoryButton.setText("Reset");
        resetInventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetInventoryButtonActionPerformed(evt);
            }
        });
        resetInventoryTab.add(resetInventoryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 350, 80, 30));

        systemManagementTabbedPane.addTab("Reset Inventory", resetInventoryTab);

        resetSystemTab.setBackground(new java.awt.Color(255, 255, 255));
        resetSystemTab.setPreferredSize(new java.awt.Dimension(720, 299));
        resetSystemTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setText("Reset System");
        resetSystemTab.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(670, 113));

        resetInventoryDescription1.setEditable(false);
        resetInventoryDescription1.setColumns(20);
        resetInventoryDescription1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        resetInventoryDescription1.setLineWrap(true);
        resetInventoryDescription1.setRows(5);
        resetInventoryDescription1.setText("Resetting the system will permanently delete all inventory, transaction history, suppliers, and hospital data. This action cannot be undone!\n\nConsequences of Resetting the System:\n[1] All stock levels will be cleared.\n[2] Low stock alerts and transaction history will be erased.\n[3] All supplier and hospital records will be deleted.\n[4] All system configurations are reset to default.\n[5] Manual reconfiguration will be required before resuming system operations.\n\nOnly proceed if you are absolutely sure you want to reset the system.");
        resetInventoryDescription1.setWrapStyleWord(true);
        resetInventoryDescription1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        jScrollPane3.setViewportView(resetInventoryDescription1);

        resetSystemTab.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 89, -1, 220));

        resetSystemButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        resetSystemButton.setText("Reset");
        resetSystemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSystemButtonActionPerformed(evt);
            }
        });
        resetSystemTab.add(resetSystemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 340, 80, 30));

        systemManagementTabbedPane.addTab("Reset System", resetSystemTab);

        jPanel1.add(systemManagementTabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetInventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetInventoryButtonActionPerformed
        int choice = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to reset the inventory?\nThis action cannot be undone!",
            "Confirm Inventory Reset",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        if (choice == JOptionPane.YES_OPTION) {
            LinkedHashMap<String, String> msg = this.usrCtrl.getPPEController().resetInventory();
            if (msg.get("success") != null) {
                JOptionPane.showMessageDialog(this, "Inventory has been reset successfully!", "Reset Complete", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to reset inventory :(\n" + msg.get("msg"), "Reset Failed", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Inventory reset canceled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_resetInventoryButtonActionPerformed

    private void resetSystemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSystemButtonActionPerformed
        int choice = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to reset the system?\nThis action cannot be undone!",
            "Confirm System Reset",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        if (choice == JOptionPane.YES_OPTION) {
            if (this.usrCtrl.getPPEController().resetSystem()) {
                JOptionPane.showMessageDialog(this, "System has been reset successfully!", "Reset Complete", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to reset system :(", "Reset Failed", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "System reset canceled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_resetSystemButtonActionPerformed

    private void initializeInventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initializeInventoryButtonActionPerformed
        int choice = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to initialize the inventory?\nThis action cannot be undone!",
            "Confirm Inventory Initialization",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        if (choice == JOptionPane.YES_OPTION) {
            LinkedHashMap<String, String> msg = this.usrCtrl.getPPEController().initializeInventory();
            if (msg.get("success") != null) {
                JOptionPane.showMessageDialog(this, "Inventory has been initialized successfully!", "Reset Complete", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to initialize inventory :(\n" + msg.get("msg"), "Reset Failed", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Inventory initialization canceled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_initializeInventoryButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton initializeInventoryButton;
    private javax.swing.JTextArea initializeInventoryDescription;
    private javax.swing.JPanel initializeInventoryTab;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton resetInventoryButton;
    private javax.swing.JTextArea resetInventoryDescription;
    private javax.swing.JTextArea resetInventoryDescription1;
    private javax.swing.JPanel resetInventoryTab;
    private javax.swing.JButton resetSystemButton;
    private javax.swing.JPanel resetSystemTab;
    private javax.swing.JTabbedPane systemManagementTabbedPane;
    // End of variables declaration//GEN-END:variables
}
